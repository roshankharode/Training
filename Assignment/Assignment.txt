 q1 ) what is metaspace and heap memory
ans -The OpenJDK uses Metaspace to store its class metadata.Heap memory is a part of memory allocated to JVM, which is shared by all executing threads in the application.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. generate multiples of 2 until 20 using recursive function
Ans--   
public class GenerateMultiple {

	static void multiply(int num,int i ) {
		if(i > 10) {
			return;
		}
		
		System.out.println(num +" * "+ i +" = "+num*i);
		multiply(num , i+1);
		
	}
	
	public static void main(String[] args) {
		int num = 2 ;
		multiply(num , 1);
	}

}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


3. check if two strings are equal or not.
Ans - 
import java.util.Scanner;

public class CheckTwoString {

	public static void main(String[] args) {
		Scanner sc = new Scanner (System.in);
		System.out.println("Write First String");
		String s1=sc.next();
		System.out.println("Write Second String");
		String s2=sc.next();
		
		if(s1.equals(s2)) {
			System.out.println("equal");
		}else {
			System.out.println("not equal");
		}	
	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. print the character count in a string say 
string s ="helloworld" print h-1, e-1, l-3,o-2

Ans - 
public class Occurence {
public static void main(String[] args) {
	String str="Helloworld";
    int count[]=new int[256];
    
    
	for(int i =0;i<str.length();i++){
		count[(int)str.charAt(i)]++;
		
	}
	
	for(int i=0;i<256;i++)
		if(count[i]!=0)
	System.out.println((char)i+"--> "+count[i]);

	}
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



5. why java is platform independent
Ans - Java is platform-independent because it does not depend on any type of platform
In Java, programs are compiled into byte code and that byte code is platform-independent. ... Any machine to execute the byte code needs the Java Virtual Machine.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. can we create class as final
Ans -You can declare some or all of a class's methods final.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. considder we have employee class with empid, empname and salary
and list of employees get the the highest salary paid employee data
Ans - 


public class Employee {
private int employeeId;
private String empName;
private double empSalary;

	public double getEmpSalary() {
	return empSalary;
}

public void setEmpSalary(double empSalary) {
	this.empSalary = empSalary;
}
 
public double highestSalary() {
     double min=1.0;
     if(empSalary>min) {
    	 min=empSalary;
     }
     return min;
     
}


	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8. consider a list of duplicate values remove duplicate value and get unique values from the list
Ans- 
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class RemoveDupli {
	public static void main(String[] args) {
		List<Integer> lst = Arrays.asList(1, 2, 3, 4, 5, 1, 2, 3);
		
		
		Set st = new HashSet(lst);
		
		for (Object s : st)
			System.out.print(s + " ");
	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. can we write try and finally without catch block what is the use
Ans - Yes, we can have try without catch block by using finally block.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


10. what is garbage collector and how it works
Ans - In Java, garbage collection is the process of managing memory, automatically. 
      It finds the unused objects (that are no longer used by the program) and delete or remove them to free up the memory. 

Garbage collection works by employing several GC algorithm e.g. Mark and Sweep. 
There are different kinds of garbage collector available in Java to collect different area of heap memory



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11. what is heap space
 Ans - Heap space is used for the dynamic memory allocation of Java objects and JRE classes at runtime. New objects are always created in heap space,
       and the references to these objects are stored in stack memory. 
       These objects have global access and we can access them from anywhere in the application.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12 
    what is java memory model
Ans - The Java memory model describes how threads in the Java programming language interact through memory. Together with the description of single-threaded execution of code
     the memory model provides the semantics of the Java programming language.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13. what is young and old generations
Ans- When using generational garbage collection, the heap area is divided into two areas—a young generation and an old generation—that are garbage-collected via separate strategies. 
     Objects are ussually created in the young area. Once an object has survived a couple of GC cycles it is tenured to the old generation.




---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

14.  what is eden and survivor space
Ans -  Eden Space: The pool from which memory is initially allocated for most objects. Survivor Space: The pool containing objects that have survived the garbage collection of the Eden space.


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 